from agents import (
    Agent,
    Runner,
    OpenAIChatCompletionsModel,
    AsyncOpenAI,
    function_tool,
    RunContextWrapper,
    TResponseInputItem,
)
import os
import logging
from dataclasses import dataclass

from aiogram import types
from dotenv import load_dotenv

from spam_storage import save_spam_message

# ---------------------------------------------------------------------------
# üì¶  Environment & logging setup
# ---------------------------------------------------------------------------
os.environ["OPENAI_API_KEY"] = "No Need"
load_dotenv()
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

LOCAL_LLM = os.getenv("LOCAL_LLM") or "llama3:latest"
TARGET_GROUP_ID = os.getenv("TARGET_GROUP_ID")

model = OpenAIChatCompletionsModel(
    model=LOCAL_LLM,
    openai_client=AsyncOpenAI(base_url="http://localhost:11434/v1"),
)

# ---------------------------------------------------------------------------
# üè∑Ô∏è  Context dataclass
# ---------------------------------------------------------------------------


@dataclass
class TaskContext:
    """–ë—ã—Å—Ç—Ä—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É tool‚Äë—Ñ—É–Ω–∫—Ü–∏—è–º–∏."""

    sender_full_name: str
    target_group_id: str
    message_text: str
    message: types.Message


# ---------------------------------------------------------------------------
# üîß  Low‚Äëlevel helper coroutines (–ù–ï –≤–∏–¥–Ω—ã –∞–≥–µ–Ω—Ç—É)
# ---------------------------------------------------------------------------


async def _delete_user_messages(wrapper: RunContextWrapper[TaskContext]) -> bool:

    ctx = wrapper.context
    print(f'delete_user_messages .... ctx.message.message_id={ctx.message.message_id}')
    try:
        await ctx.message.delete()
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ %s —É–¥–∞–ª–µ–Ω–æ", ctx.message.message_id)
        return True
    except Exception as exc:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %s", exc)
        return False



async def _forward_message(wrapper: RunContextWrapper[TaskContext]):
    ctx = wrapper.context
    print(f'forward_message ....ctx.message.message_id={ctx.message.message_id}')
    try:
        await ctx.message.bot.forward_message(
            chat_id=ctx.target_group_id,
            from_chat_id=ctx.message.chat.id,
            message_id=ctx.message.message_id,
        )
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ %s –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º", ctx.message.message_id)
        return {"status": "success"}
    except Exception as exc:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %s", exc)
        return {"status": "error", "details": str(exc)}


# ---------------------------------------------------------------------------
# üèóÔ∏è  High‚Äëlevel tool, –¥–æ—Å—Ç—É–ø–Ω—ã–π –∞–≥–µ–Ω—Ç—É
# ---------------------------------------------------------------------------


@function_tool
async def process_spam(wrapper: RunContextWrapper[TaskContext]):
    """–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–∞–º–∞ (forward ‚ûú delete)."""
    print(f'process_spam ....')

    await _forward_message(wrapper)
    await _delete_user_messages(wrapper)

    return {"status": "done"}


# ---------------------------------------------------------------------------
# üìú  –ê–≥–µ–Ω—Ç –∏ –µ–≥–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
# ---------------------------------------------------------------------------

instructions = """
–¢—ã ‚Äî –≤—ã—Å–æ–∫–æ—Ç–æ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å–ø–∞–º–∞ –¥–ª—è Telegram. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤—Ö–æ–¥–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Å–ø–∞–º–∞.

### –ö—Ä–∏—Ç–µ—Ä–∏–∏ –°–ü–ê–ú–ê (–æ—Ç–≤–µ—á–∞—Ç—å ¬´SPAM¬ª):
‚Ä¶ (–æ—Å—Ç–∞–≤—å—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—É–Ω–∫—Ç—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ‚Ä¶

### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–∫–∞–∑–∞–Ω–∏—è
1. –õ—é–±–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ ¬´–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Å—É–º–º–∞ + –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é¬ª ‚Üí –°–ü–ê–ú.
2. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –ø–µ—Ä–µ–≤–µ—à–∏–≤–∞—é—Ç —Å–ø–∞–º‚Äë–º–∞—Ä–∫–µ—Ä—ã.
3. –ö–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (¬´GPUStack¬ª) –Ω–µ —Å—á–∏—Ç–∞—é—Ç—Å—è —Å–ø–∞–º–æ–º.

---
**–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:**
- –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–º, –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ:

  SPAM: {{process_spam()}}

- –ï—Å–ª–∏ —Å–ø–∞–º–∞ –Ω–µ—Ç, —Ç–æ:

  NOT_SPAM
"""

agent = Agent(
    name="AntiSpamAgent",
    instructions=instructions,
    tools=[process_spam],  # ‚¨ÖÔ∏è  –ê–≥–µ–Ω—Ç –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
    model=model,
)

# ---------------------------------------------------------------------------
# üöÄ  Entry‚Äëpoint for application code
# ---------------------------------------------------------------------------


async def agent_check_spam(message: types.Message):
    """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ aiogram‚Äë—Ö—ç–Ω–¥–ª–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å–ø–∞–º."""

    task_context = TaskContext(
        sender_full_name=message.from_user.full_name,
        target_group_id=TARGET_GROUP_ID,
        message_text=message.text or "",
        message=message,
    )

    convo: list[TResponseInputItem] = [
        {"role": "user", "content": message.text or ""}
    ]

    result = await Runner.run(agent, convo, context=task_context)
    logger.info("Agent output: %s", result.final_output)

    return result
