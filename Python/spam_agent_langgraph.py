"""
Anti-Spam agent implemented with LangGraph.
Guarantees the sequence:
save_spam() ‚ûú forward_message() ‚ûú delete_user_messages()
"""

import os
import logging
from typing import TypedDict

from dotenv import load_dotenv
from aiogram import types

from langgraph.graph import StateGraph, END
from langchain_openai import ChatOpenAI
from langchain.schema.messages import HumanMessage
from langchain.tools import tool

from spam_storage import save_spam_message  # –≤–∞—à–∞ –ë–î-—Ñ—É–Ω–∫—Ü–∏—è

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# ------------------------------------------------------------------ #
# ‚¨áÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
# ------------------------------------------------------------------ #
os.environ["OPENAI_API_KEY"] = "No Need"
load_dotenv()
OPENAI_BASE_URL = "http://localhost:11434/v1"
LOCAL_LLM = os.getenv("LOCAL_LLM")
TARGET_GROUP_ID = int(os.getenv("TARGET_GROUP_ID"))

llm = ChatOpenAI(
    model_name=LOCAL_LLM,
    base_url=OPENAI_BASE_URL,
    streaming=False,
    temperature=0.0,
)


# ------------------------------------------------------------------ #
# ‚¨áÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥—Ä–∞—Ñ–∞
# ------------------------------------------------------------------ #
class AgentState(TypedDict, total=False):
    """–û–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π ¬´–ø—É—Ç–µ—à–µ—Å—Ç–≤—É–µ—Ç¬ª –ø–æ –≥—Ä–∞—Ñ—É"""
    message: types.Message
    sender_full_name: str
    target_group_id: int
    is_spam: bool
    classification_text: str  # –æ—Ç–≤–µ—Ç LLM (–¥–ª—è –ª–æ–≥–æ–≤)


# ------------------------------------------------------------------ #
# ‚¨áÔ∏è –£–∑–ª—ã-–¥–µ–π—Å—Ç–≤–∏—è —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
# ------------------------------------------------------------------ #
async def detect_spam(state: AgentState) -> AgentState:
    """LLM-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: SPAM / NOT_SPAM ‚Üí is_spam bool"""
    logger.info("‚è≥ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–∑–ª–∞ detect_spam...")

    msg_text = state["message"].text or ""
    system_prompt = (
        "–¢—ã ‚Äî –≤—ã—Å–æ–∫–æ—Ç–æ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å–ø–∞–º–∞ –¥–ª—è Telegram.\n"
        "–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ 'SPAM' –∏–ª–∏ 'NOT_SPAM' –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π.\n"
        """### –ö—Ä–∏—Ç–µ—Ä–∏–∏ SPAM (–º–∞—Ä–∫–∏—Ä–æ–≤–∞—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å –•–û–¢–Ø –ë–´ –û–î–ò–ù –ø—Ä–∏–∑–Ω–∞–∫):
1. **–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è + –∫–æ–Ω—Ç–∞–∫—Ç:**
   - –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å—É–º–º ($, ‚ÇΩ, "–¥–æ—Ö–æ–¥", "–ø—Ä–∏–±—ã–ª—å") + –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é ("–ø–∏—à–∏", "–õ–°", "–Ω–∞–ø–∏—à–∏", "–∂–¥—É –≤ –ª–∏—á–∫—É")
   - *–ü—Ä–∏–º–µ—Ä—ã:*
     ‚ñ∏ "–î–æ—Ö–æ–¥ 110$/–¥–µ–Ω—å. –ü–∏—à–∏—Ç–µ –≤ –õ–°"
     ‚ñ∏ "–ü–æ–ª—É—á–∞–π 70$ –≤ –¥–µ–Ω—å ‚Äî –Ω–∞–ø–∏—à–∏ –º–Ω–µ –ø–ª—é—Å"

2. **–ì–∞—Ä–∞–Ω—Ç–∏–∏ –±—ã—Å—Ç—Ä–æ–π –≤—ã–≥–æ–¥—ã:**
   - –§—Ä–∞–∑—ã: "–±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π", "–±–µ–∑ –æ–ø—ã—Ç–∞", "–≤—Å—ë –ø—Ä–æ—Å—Ç–æ", "–±–µ–∑ —Å—Ç—Ä–µ—Å—Å–æ–≤", "—Ç–æ–ª—å–∫–æ N —á–µ–ª–æ–≤–µ–∫", "—Ç—Ä–µ–±—É—é—Ç—Å—è –ª—é–¥–∏"
   - *–ü—Ä–∏–º–µ—Ä—ã:*
     ‚ñ∏ "–¢–æ–ª—å–∫–æ 5 —á–µ–ª–æ–≤–µ–∫ ‚Äî –∑–∞–±–∏—Ä–∞–π—Ç–µ 80% –ø—Ä–∏–±—ã–ª–∏"
     ‚ñ∏ "–ë–µ–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π ‚Äî 600$ –≤ –Ω–µ–¥–µ–ª—é"

3. **–®–∞–±–ª–æ–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:**
   - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ + –∫–æ–Ω—Ç–∞–∫—Ç:
     ‚ñ∏ "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è! –û—Ç–∫—Ä—ã—Ç–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –¥–æ—Ö–æ–¥–æ–º 250$/–¥–µ–Ω—å. –ü–∏—à–∏—Ç–µ –¥–∞"
     ‚ñ∏ "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ù—É–∂–Ω—ã –ª—é–¥–∏ –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ 70$ ‚Äî –æ–±—Å—É–¥–∏–º –≤ –õ–°"
   - –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ "—Ñ–æ—Ä–º–∞—Ç–æ–≤" –∏–ª–∏ "–ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤":
     ‚ñ∏ "–ü–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–æ 80/20: –≤–∞—à–∏ 80% –±–µ–∑ —Ä—É—Ç–∏–Ω—ã"
     ‚ñ∏ "–†–∞–±–æ—á–∏–π —Ñ–æ—Ä–º–∞—Ç: —Ç–µ–ª–µ—Ñ–æ–Ω + $15/—á–∞—Å"

4. **–°–∫—Ä—ã—Ç—ã–µ –º–∞—Ä–∫–µ—Ä—ã:**
   - –£–¥–∞–ª—ë–Ω–∫–∞ + –¥–æ—Ö–æ–¥ + —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:
     ‚ñ∏ "–£–¥–∞–ª—ë–Ω–∫–∞ –±–µ–∑ –Ω–∞—á–∞–ª—å–Ω–∏–∫–æ–≤. –¢–µ–ª–µ—Ñ–æ–Ω + $13/—á–∞—Å"
     ‚ñ∏ "–°–º–∞—Ä—Ç—Ñ–æ–Ω = $15/—á–∞—Å. –ü–∏—à–∏ –∑–∞ –¥–µ—Ç–∞–ª—è–º–∏"
   - –ú–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏: "–°—Ä–æ—á–Ω–æ!", "–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å", "–£–Ω–∏–∫–∞–ª—å–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å"

### –ö—Ä–∏—Ç–µ—Ä–∏–∏ NOT_SPAM (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –û–¢–°–£–¢–°–¢–í–ò–ò –≤—Å–µ—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤—ã—à–µ):
- **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è:**
  ‚ñ∏ –ö–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π ("Q4_K_M", "Q8"), fine-tuning, –ò–ò-–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
  ‚ñ∏ –í–æ–ø—Ä–æ—Å—ã –ø—Ä–æ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ ("whisper –Ω–∞ –∫–∞–∑–∞—Ö—Å–∫–æ–º", "vllm", "–≤–µ–∫—Ç–æ—Ä–Ω—ã–µ –±–∞–∑—ã")
- **–†–∞–±–æ—á–∏–µ –≤–æ–ø—Ä–æ—Å—ã:**
  ‚ñ∏ –í—Å—Ç—Ä–µ—á–∏ ("—Å–µ–≥–æ–¥–Ω—è –≤ 18:00"), –¥–æ–∫—É–º–µ–Ω—Ç—ã, —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞
- **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞:**
  ‚ñ∏ –û–±—Å—É–∂–¥–µ–Ω–∏–µ ChatGPT, –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π, –ø—Ä–æ–±–ª–µ–º –ò–ò
- **–õ–∏—á–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏:**
  ‚ñ∏ "–ß—Ç–æ –¥—É–º–∞–µ—Ç–µ –æ...", "–ë—ã–ª –ø–æ—Ö–æ–∂–∏–π —Å–ª—É—á–∞–π...", –≥–∏–ø–æ—Ç–µ–∑—ã –æ–± —ç–ø–æ—Ö–µ –ò–ò

### –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞:
1. **–õ—é–±–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ** "–¥–µ–Ω—å–≥–∏ ($/‚ÇΩ)" + "–∫–æ–Ω—Ç–∞–∫—Ç (–õ–°/–ø–∏—à–∏)" ‚Üí SPAM
2. **–õ—é–±–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ** "—Ä–æ–∑—ã–≥—Ä—ã—à–∞", "–≤–∑–ª–æ–º–∞", "–ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–∞" —Å —Ü–∏—Ñ—Ä–∞–º–∏ ‚Üí SPAM
3. **–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å:**
   - –û–ø–µ—á–∞—Ç–∫–∏, –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞, –≤–µ–∂–ª–∏–≤—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
   - –û–±—Å—É–∂–¥–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏, —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤, –µ—Å–ª–∏ –Ω–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π

### –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏:
- **SPAM:**
  "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –î–æ—Ö–æ–¥ 600$/–Ω–µ–¥–µ–ª—è. –ù–∞–ø–∏—à–∏ –≤ –õ–° ‚Üí –ë–µ–∑ –æ–ø—ã—Ç–∞!"
  "–î–µ–ª—é—Å—å —Ñ–æ—Ä–º–∞—Ç–æ–º: —Å–º–∞—Ä—Ç—Ñ–æ–Ω + $14/—á–∞—Å. –ñ–¥—É –≤ –ª–∏—á–∫—É!"
  "–ó–∞—Ä–∞–±–æ—Ç–∞–π 250$/–¥–µ–Ω—å. –ü–∏—à–∏ '–î–∞' ‚Üí –¢–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è!"
- **NOT_SPAM:**
  "–ö–∞–∫ –∫–≤–∞–Ω—Ç–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è Q8?"
  "–ü–æ—á–µ–º—É ChatGPT —Å—Ç–∞–ª —É–≥–æ–¥–ª–∏–≤—ã–º?"
  "–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä AB123456 –≥–æ—Ç–æ–≤"
=================================================="""
        f"–°–æ–æ–±—â–µ–Ω–∏–µ: ¬´{msg_text}¬ª"
    )

    logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM: {system_prompt[:100]}...")
    answer = await llm.ainvoke([HumanMessage(content=system_prompt)])
    answer_content = answer.content

    state["classification_text"] = answer_content
    state["is_spam"] = answer_content.strip().upper().startswith("SPAM")

    logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {'SPAM' if state['is_spam'] else 'NOT_SPAM'}")
    logger.info("‚úÖ –£–∑–µ–ª detect_spam –∑–∞–≤–µ—Ä—à–µ–Ω")
    return state


@tool("save_spam")
async def save_spam_tool(
        sender_full_name: str,
        message_text: str,
) -> dict:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É"""
    logger.info("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∞–º–∞ –≤ –ë–î...")
    save_spam_message(sender_full_name, message_text)
    return {"status": "saved"}


async def save_spam_node(state: AgentState) -> AgentState:
    """Node-–æ–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ tool"""
    logger.info("‚è≥ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–∑–ª–∞ save_spam...")
    await save_spam_tool.ainvoke({
        "sender_full_name": state["sender_full_name"],
        "message_text": state["message"].text or ""
    })
    logger.info("‚úÖ –£–∑–µ–ª save_spam –∑–∞–≤–µ—Ä—à–µ–Ω")
    return state


async def forward_message_node(state: AgentState) -> AgentState:
    logger.info("‚è≥ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–∑–ª–∞ forward_message...")
    msg: types.Message = state["message"]

    logger.debug(f"–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É {state['target_group_id']}")
    await msg.bot.forward_message(
        chat_id=state["target_group_id"],
        from_chat_id=msg.chat.id,
        message_id=msg.message_id,
    )

    logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ")
    logger.info("‚úÖ –£–∑–µ–ª forward_message –∑–∞–≤–µ—Ä—à–µ–Ω")
    return state


async def delete_message_node(state: AgentState) -> AgentState:
    logger.info("‚è≥ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–∑–ª–∞ delete_user_message...")
    try:
        await state["message"].delete()
        logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
    logger.info("‚úÖ –£–∑–µ–ª delete_user_message –∑–∞–≤–µ—Ä—à–µ–Ω")
    return state


# ------------------------------------------------------------------ #
# ‚¨áÔ∏è –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞
# ------------------------------------------------------------------ #
graph = StateGraph(AgentState)

graph.add_node("detect_spam", detect_spam)
graph.add_node("save_spam", save_spam_node)
graph.add_node("forward_message", forward_message_node)
graph.add_node("delete_user_message", delete_message_node)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞
graph.set_entry_point("detect_spam")


# –£—Å–ª–æ–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ—Å–ª–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
def route_decision(state: AgentState) -> str:
    if state.get("is_spam"):
        logger.info("üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ø–∞–º–∞")
        return "save_spam"
    logger.info("üõë –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–ø–∞–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    return END


graph.add_conditional_edges(
    "detect_spam",
    route_decision,
)

# –ß—ë—Ç–∫–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Å–ø–∞–º–∞
graph.add_edge("save_spam", "forward_message")
graph.add_edge("forward_message", "delete_user_message")
graph.add_edge("delete_user_message", END)

# ------------------------------------------------------------------ #
# ‚¨áÔ∏è –ö–æ–º–ø–∏–ª—è—Ü–∏—è –≥—Ä–∞—Ñ–∞
# ------------------------------------------------------------------ #
graph_executor = graph.compile()

try:
    logger.info("–°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ —Ñ–∞–π–ª")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ —Ñ–∞–π–ª
    graph_image = graph_executor.get_graph().draw_mermaid_png()
    with open("../graph_image.png", "wb") as png:
        png.write(graph_image)

except Exception:
    # This requires some extra dependencies and is optional
    # –≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º
    logger.info(" –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ —Ñ–∞–π–ª")

# ------------------------------------------------------------------ #
# ‚¨áÔ∏è –í—ã–∑–æ–≤ –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ Telegram
# ------------------------------------------------------------------ #
async def agent_check_spam(message: types.Message) -> None:
    """Telegram-entry-point."""
    logger.info(f"\nüîî –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{message.from_user.username}: {message.text[:50]}...")
    initial_state: AgentState = {
        "message": message,
        "sender_full_name": message.from_user.full_name,
        "target_group_id": TARGET_GROUP_ID,
    }
    await graph_executor.ainvoke(initial_state)
    logger.info("üèÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n")